from flask import Flask, render_template, request
from flask_wtf import Form
from wtforms import StringField
from wtforms.validators import DataRequired

WTF_CSRF_ENABLED = False
  
app = Flask(__name__)
  
@app.route('/')
def home():
  return render_template('home.html')
  
@app.route('/about')
def about():
  return render_template('about.html')

@app.route('/saurav')
def saurav():
  return render_template('saurav.html')

@app.route('/rishabh')
def rishabh():
  return render_template('rishabh.html')

@app.route('/brijesh')
def brijesh():
  return render_template('brijesh.html')

@app.route('/dynamic_average',methods=['GET','POST'])
def index():
  sol=None
  if request.method=='POST' and 'listt' in request.form:
      l=request.form['listt'].split(" ")
      for i in range(len(l)):
          l[i]=float(l[i])
      sol=sum(l)/len(l)
  return render_template('dynamic_average.html',soln=sol)

@app.route('/dynamic_', methods=['GET', 'POST'])
def dynamic_():
  a = None
  b = None
  n = None
  fn = None
  sol = None
  k = None
  if request.method == 'POST' and 'a' in request.form and 'b' in request.form and 'n' in request.form and 'fn' in request.form:
      a = request.form['a']
      b = request.form['b']
      n = request.form['n']
      # fn = request.form['fn']
      fn = lambda x: eval(request.form['fn'])
      a = float(a)
      b = float(b)
      n=float(n)
      k = (b-a) / n
      sol = fn(a)
      q = []
      n=int(n)
      for i in range(1,n):
          i = float(i)
          q.append(i)
      for i in q:
          sol += 2 * fn(a + (i * k))
      sol = sol + fn(b)
      a = int(a)
      b = int(b)
      sol = (sol * k) / 2
      import matplotlib.pyplot as pt  # import plotting library
      from numpy import arange
      fig=pt.figure()


      x = [i for i in arange(a, b, (b - a) / (n * 1000.0))]  # list of values between a and b
      x = x + [b]
      y = [i for i in arange(a, b, (b - a) / (n * 1.0))]  # list of values of x
      y = y + [b]
      z = [fn(i) for i in x]  # list of function values
      pt.plot(x, z)  # plotting the curve
      for i in range(n + 1):
          pt.plot([y[i], y[i]], [0, fn(y[i])])  # parallel sides of the trapezium
      for i in range(n):
          pt.plot([y[i], y[i + 1]], [fn(y[i]), fn(y[i + 1])])  # non-parallel sides of trapezium
      #pt.show()  #output
      pt.axvline(0,color="k")
      pt.axhline(0,color="k")
      if os.path.exists("C:\\Users\\SaUrAv pc\\flaskapp\\app\\static\\graph.png"):
          os.remove("C:\\Users\\SaUrAv pc\\flaskapp\\app\\static\\graph.png")
          pt.savefig("C:\\Users\\SaUrAv pc\\flaskapp\\app\\static\\graph.png", dpi=fig.dpi)
      else :
          pt.savefig("C:\\Users\\SaUrAv pc\\flaskapp\\app\\static\\graph.png", format="png", 
dpi=fig.dpi)
  return render_template('dynamic_.html')


  
if __name__ == '__main__':
  app.run(debug=True)
